package {{applicationId}}.di

import {{applicationId}}.data.repository.items.remote.{{pascalCase appName}}Api
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.components.SingletonComponent
{{#addNetworking}}
import {{applicationId}}.BuildConfig
{{/addNetworking}}
{{#addRetrofit}}
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
{{/addRetrofit}}

@Module
@InstallIn(SingletonComponent::class)
object NetworkModule {

    // sample di implementation
    @Provides
    fun provideSampleText(): String {
        return "Sample text"
    }

    {{#addRetrofit}}
    private val interceptor = HttpLoggingInterceptor().apply {
        level = HttpLoggingInterceptor.Level.BODY
    }

    private val okHttpClient = OkHttpClient.Builder().addInterceptor(interceptor).build()    

    @Provides
    fun provide{{pascalCase appName}}Api(): {{pascalCase appName}}Api {
        return Retrofit.Builder()
            .baseUrl(BuildConfig.BASE_URL)
            .client(okHttpClient)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
            .create({{pascalCase appName}}Api::class.java)

    }
    
    {{/addRetrofit}}
}